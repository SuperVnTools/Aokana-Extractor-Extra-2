#! /usr/bin/env python3

import struct
import os
import sys

# 32 Bits module
global mod, mod1
mod = 2 ** 32
mod1 = 2 ** 31
mod2 = 2**32-1

# Generate Key array 
def gk(k):
    a = (k * 4892 + 42816) % mod
    b = (a << 7 ^ a) % mod
    out = []
    for _ in range(256):
        a = (a - k + b) % mod
        b = (a + 156) % mod
        a = (a * (b & 206)) % mod
        out.append(a & 255)
        a = a >> 3
    return out

# decrypt data with key(Generated by k)
def dd(data, k):
    data = bytearray(data)
    key = gk(k)
    for i in range(len(data)):
        k = data[i]
        k = k ^ key[i % 179]
        k = k + 3 + key[i % 89]
        k = k ^ 119
        data[i] = k & 255
    return data

# Parse file header and get file list & location for decrypt
def getInfo(f):
    f.seek(0)
    header = f.read(1024)
    num = ((sum(struct.unpack(252 * "i", header[12:-4])) + mod1) % mod) % (mod1)
    raw = dd(f.read(16 * num), struct.unpack("I", header[212:216])[0])
    start = struct.unpack("I", raw[12:16])[0]
    array = dd(f.read(start - 1024 - 16 * num), struct.unpack("I", header[92:96])[0])
    out = []
    for i in range(num):
        l, offset, k, p = struct.unpack("IIII", raw[16 * i:16 * (i + 1)])
        name = array[offset:array.find(0, offset)].decode("ascii")
        out.append((name, p, l, k))
    return out

# Locate position, create file, then write decrypted binaries
def extract(f, files, out):
    for name, p, l, k in files:
        print("Extracting file %s ..." % name, end="")
        name = os.path.join(out, name)
        os.makedirs(os.path.dirname(name), exist_ok=True)
        with open(name, "wb") as o:
            f.seek(p)
            data = dd(f.read(l), k)
            o.write(data)
            print("Done.", end="\n")

# Entry: argv1-> .dat file path; argv2-> output path
if __name__ == "__main__":
    path = sys.argv[1]
    f = open(path, "rb")
    files = getInfo(f)
    if len(sys.argv) == 3:
        extract(f, files, sys.argv[2])
    elif len(sys.argv) == 2:
        for item in files:
            print(item[0], item[2], "\tKByte(s)")
